// Package restgen_market provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package restgen_market

import (
	"github.com/gin-gonic/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// BuyResponse defines model for BuyResponse.
type BuyResponse struct {
	Message string `json:"message"`
}

// Cid Unique file identifier inside IPFS
type Cid = string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error *string `json:"error,omitempty"`
}

// MarketToken defines model for MarketToken.
type MarketToken struct {
	// Cid Unique file identifier inside IPFS
	Cid  Cid    `json:"cid"`
	Icon string `json:"icon"`
	Name string `json:"name"`
}

// MarketTokenBuyRequest defines model for MarketTokenBuyRequest.
type MarketTokenBuyRequest struct {
	// BuyerId User ID inside the blockchain system (address)
	BuyerId UserId `json:"buyer_id"`

	// Cid Unique file identifier inside IPFS
	Cid Cid `json:"cid"`

	// SellerId User ID inside the blockchain system (address)
	SellerId UserId `json:"seller_id"`
}

// MarketTokenDeleteRequest defines model for MarketTokenDeleteRequest.
type MarketTokenDeleteRequest struct {
	// Cid Unique file identifier inside IPFS
	Cid Cid `json:"cid"`

	// UserId User ID inside the blockchain system (address)
	UserId UserId `json:"user_id"`
}

// MarketTokenGetRequest defines model for MarketTokenGetRequest.
type MarketTokenGetRequest struct {
	// Cid Unique file identifier inside IPFS
	Cid Cid `json:"cid"`
}

// MarketTokenListRequest defines model for MarketTokenListRequest.
type MarketTokenListRequest struct {
	// Cursor Cursor to start from
	Cursor int `json:"cursor"`
	Filter *struct {
		// Name Name of the token
		Name *string `json:"name,omitempty"`
	} `json:"filter,omitempty"`

	// Limit Limit of tokens to return
	Limit int `json:"limit"`

	// UserId User ID inside the blockchain system (address)
	UserId UserId `json:"user_id"`
}

// MarketTokenListResponse defines model for MarketTokenListResponse.
type MarketTokenListResponse struct {
	// NextCursor Next cursor to start from
	NextCursor *int           `json:"next_cursor,omitempty"`
	Tokens     *[]MarketToken `json:"tokens,omitempty"`
}

// MarketTokenPatchRequest defines model for MarketTokenPatchRequest.
type MarketTokenPatchRequest struct {
	// Cid Unique file identifier inside IPFS
	Cid Cid `json:"cid"`

	// File Token card to update
	File *openapi_types.File `json:"file,omitempty"`

	// Name Token name
	Name *string `json:"name,omitempty"`

	// Price Price of the token
	Price *float32 `json:"price,omitempty"`
}

// MarketTokenPostRequest defines model for MarketTokenPostRequest.
type MarketTokenPostRequest struct {
	// Cid Unique file identifier inside IPFS
	Cid Cid `json:"cid"`

	// File Token card to save
	File openapi_types.File `json:"file"`

	// Name Token name
	Name string `json:"name"`

	// Price Price of the token
	Price float32 `json:"price"`
}

// UserId User ID inside the blockchain system (address)
type UserId = string

// DeleteMarketTokenJSONRequestBody defines body for DeleteMarketToken for application/json ContentType.
type DeleteMarketTokenJSONRequestBody = MarketTokenDeleteRequest

// GetMarketTokenJSONRequestBody defines body for GetMarketToken for application/json ContentType.
type GetMarketTokenJSONRequestBody = MarketTokenGetRequest

// PatchMarketTokenJSONRequestBody defines body for PatchMarketToken for application/json ContentType.
type PatchMarketTokenJSONRequestBody = MarketTokenPatchRequest

// PostMarketTokenMultipartRequestBody defines body for PostMarketToken for multipart/form-data ContentType.
type PostMarketTokenMultipartRequestBody = MarketTokenPostRequest

// PostMarketTokenBuyJSONRequestBody defines body for PostMarketTokenBuy for application/json ContentType.
type PostMarketTokenBuyJSONRequestBody = MarketTokenBuyRequest

// GetMarketTokenListJSONRequestBody defines body for GetMarketTokenList for application/json ContentType.
type GetMarketTokenListJSONRequestBody = MarketTokenListRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (DELETE /market/token)
	DeleteMarketToken(c *gin.Context)

	// (GET /market/token)
	GetMarketToken(c *gin.Context)

	// (PATCH /market/token)
	PatchMarketToken(c *gin.Context)

	// (POST /market/token)
	PostMarketToken(c *gin.Context)

	// (POST /market/token/buy)
	PostMarketTokenBuy(c *gin.Context)

	// (GET /market/token/list)
	GetMarketTokenList(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// DeleteMarketToken operation middleware
func (siw *ServerInterfaceWrapper) DeleteMarketToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteMarketToken(c)
}

// GetMarketToken operation middleware
func (siw *ServerInterfaceWrapper) GetMarketToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMarketToken(c)
}

// PatchMarketToken operation middleware
func (siw *ServerInterfaceWrapper) PatchMarketToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchMarketToken(c)
}

// PostMarketToken operation middleware
func (siw *ServerInterfaceWrapper) PostMarketToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostMarketToken(c)
}

// PostMarketTokenBuy operation middleware
func (siw *ServerInterfaceWrapper) PostMarketTokenBuy(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostMarketTokenBuy(c)
}

// GetMarketTokenList operation middleware
func (siw *ServerInterfaceWrapper) GetMarketTokenList(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMarketTokenList(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.DELETE(options.BaseURL+"/market/token", wrapper.DeleteMarketToken)
	router.GET(options.BaseURL+"/market/token", wrapper.GetMarketToken)
	router.PATCH(options.BaseURL+"/market/token", wrapper.PatchMarketToken)
	router.POST(options.BaseURL+"/market/token", wrapper.PostMarketToken)
	router.POST(options.BaseURL+"/market/token/buy", wrapper.PostMarketTokenBuy)
	router.GET(options.BaseURL+"/market/token/list", wrapper.GetMarketTokenList)
}
