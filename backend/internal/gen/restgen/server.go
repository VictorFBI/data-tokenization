// Package restgen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package restgen

import (
	"github.com/gin-gonic/gin"
)

// Defines values for FilterPropsSort.
const (
	Asc  FilterPropsSort = "asc"
	Desc FilterPropsSort = "desc"
)

// FilterProps defines model for FilterProps.
type FilterProps struct {
	// Search Search string to filter tokens by name
	Search *string `json:"search"`

	// Sort Sort order (ascending or descending)
	Sort *FilterPropsSort `json:"sort"`
}

// FilterPropsSort Sort order (ascending or descending)
type FilterPropsSort string

// Token defines model for Token.
type Token struct {
	// Icon Icon representing token type
	Icon *string `json:"icon"`

	// Id Unique token identifier
	Id string `json:"id"`

	// Name Token name
	Name string `json:"name"`
}

// GetTokensJSONRequestBody defines body for GetTokens for application/json ContentType.
type GetTokensJSONRequestBody = FilterProps

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get filtered tokens
	// (POST /tokens)
	GetTokens(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetTokens operation middleware
func (siw *ServerInterfaceWrapper) GetTokens(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTokens(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/tokens", wrapper.GetTokens)
}
